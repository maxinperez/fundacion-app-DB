package com.fundacion.dao;

import com.fundacion.model.Padrino;
import com.fundacion.model.Donante;
import com.fundacion.model.Contacto;

import java.sql.*;
import java.util.Scanner;

public class PadrinoDAO {

    private Connection connection;

    public PadrinoDAO(Connection connection) {
        this.connection = connection;
    }

    public void insertarPadrino(Padrino padrino) {
        String sql = "INSERT INTO Padrino (dni, nombre, apellido, direccion, email, fecha_nacimiento, facebook, cod_postal, telefono_fijo, telefono_celular) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, padrino.getDni());
            stmt.setString(2, padrino.getNombre());
            stmt.setString(3, padrino.getApellido());
            stmt.setString(4, padrino.getDireccion());
            stmt.setString(5, padrino.getEmail());
            stmt.setDate(6, Date.valueOf(padrino.getFechaNacimiento()));
            stmt.setString(7, padrino.getFacebook());
            stmt.setInt(8, padrino.getCodPostal());
            stmt.setInt(9, padrino.getTelefonoFijo());
            stmt.setInt(10, padrino.getTelefonoCelular());
            stmt.executeUpdate();

            System.out.println("✅ Padrino insertado correctamente.");

            // Elegir tipo de padrino (Donante o Contacto)
            Scanner scanner = new Scanner(System.in);
            System.out.print("¿Este padrino es Donante (D), Contacto (C) o ninguno (N)? ");
            String tipo = scanner.nextLine().trim().toUpperCase();

            switch (tipo) {
                case "D":
                    insertarComoDonante(padrino.getDni());
                    break;
                case "C":
                    insertarComoContacto(padrino.getDni());
                    break;
                case "N":
                    System.out.println("El padrino fue insertado sin rol adicional.");
                    break;
                default:
                    System.out.println("Opción inválida.");
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void insertarComoDonante(int dni) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Ingrese CUIL: ");
        long cuil = sc.nextLong(); sc.nextLine();
        System.out.print("Ingrese ocupación (puede estar vacía): ");
        String ocupacion = sc.nextLine();

        String sql = "INSERT INTO Donante (dni_donante, cuil, ocupacion) VALUES (?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, dni);
            stmt.setLong(2, cuil);
            stmt.setString(3, ocupacion.isEmpty() ? null : ocupacion);
            stmt.executeUpdate();
            System.out.println("Donante insertado correctamente.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void insertarComoContacto(int dni) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Fecha alta (YYYY-MM-DD): ");
        Date fechaAlta = Date.valueOf(sc.nextLine());
        System.out.print("Fecha primer contacto (YYYY-MM-DD): ");
        Date fechaPrimerContacto = Date.valueOf(sc.nextLine());
        System.out.print("Estado (Sin llamar, Error, En gestion, Adherido, Amigo, No acepta, Baja, Voluntario): ");
        String estado = sc.nextLine();

        String sql = "INSERT INTO Contacto (dni_contacto, fecha_alta, fecha_primer_contacto, estado) VALUES (?, ?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, dni);
            stmt.setDate(2, fechaAlta);
            stmt.setDate(3, fechaPrimerContacto);
            stmt.setString(4, estado);
            stmt.executeUpdate();
            System.out.println("Contacto insertado correctamente.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
